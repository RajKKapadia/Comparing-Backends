// Code generated by ent, DO NOT EDIT.

package bookmark

import (
	"bookmark-shortener/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldTitle, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldURL, v))
}

// ShortCode applies equality check predicate on the "short_code" field. It's identical to ShortCodeEQ.
func ShortCode(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldShortCode, v))
}

// VisitCount applies equality check predicate on the "visit_count" field. It's identical to VisitCountEQ.
func VisitCount(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldVisitCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldContainsFold(FieldTitle, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldContainsFold(FieldURL, v))
}

// ShortCodeEQ applies the EQ predicate on the "short_code" field.
func ShortCodeEQ(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldShortCode, v))
}

// ShortCodeNEQ applies the NEQ predicate on the "short_code" field.
func ShortCodeNEQ(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldShortCode, v))
}

// ShortCodeIn applies the In predicate on the "short_code" field.
func ShortCodeIn(vs ...string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldShortCode, vs...))
}

// ShortCodeNotIn applies the NotIn predicate on the "short_code" field.
func ShortCodeNotIn(vs ...string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldShortCode, vs...))
}

// ShortCodeGT applies the GT predicate on the "short_code" field.
func ShortCodeGT(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldShortCode, v))
}

// ShortCodeGTE applies the GTE predicate on the "short_code" field.
func ShortCodeGTE(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldShortCode, v))
}

// ShortCodeLT applies the LT predicate on the "short_code" field.
func ShortCodeLT(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldShortCode, v))
}

// ShortCodeLTE applies the LTE predicate on the "short_code" field.
func ShortCodeLTE(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldShortCode, v))
}

// ShortCodeContains applies the Contains predicate on the "short_code" field.
func ShortCodeContains(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldContains(FieldShortCode, v))
}

// ShortCodeHasPrefix applies the HasPrefix predicate on the "short_code" field.
func ShortCodeHasPrefix(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldHasPrefix(FieldShortCode, v))
}

// ShortCodeHasSuffix applies the HasSuffix predicate on the "short_code" field.
func ShortCodeHasSuffix(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldHasSuffix(FieldShortCode, v))
}

// ShortCodeEqualFold applies the EqualFold predicate on the "short_code" field.
func ShortCodeEqualFold(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEqualFold(FieldShortCode, v))
}

// ShortCodeContainsFold applies the ContainsFold predicate on the "short_code" field.
func ShortCodeContainsFold(v string) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldContainsFold(FieldShortCode, v))
}

// VisitCountEQ applies the EQ predicate on the "visit_count" field.
func VisitCountEQ(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldVisitCount, v))
}

// VisitCountNEQ applies the NEQ predicate on the "visit_count" field.
func VisitCountNEQ(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldVisitCount, v))
}

// VisitCountIn applies the In predicate on the "visit_count" field.
func VisitCountIn(vs ...int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldVisitCount, vs...))
}

// VisitCountNotIn applies the NotIn predicate on the "visit_count" field.
func VisitCountNotIn(vs ...int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldVisitCount, vs...))
}

// VisitCountGT applies the GT predicate on the "visit_count" field.
func VisitCountGT(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldVisitCount, v))
}

// VisitCountGTE applies the GTE predicate on the "visit_count" field.
func VisitCountGTE(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldVisitCount, v))
}

// VisitCountLT applies the LT predicate on the "visit_count" field.
func VisitCountLT(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldVisitCount, v))
}

// VisitCountLTE applies the LTE predicate on the "visit_count" field.
func VisitCountLTE(v int) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldVisitCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bookmark {
	return predicate.Bookmark(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Bookmark {
	return predicate.Bookmark(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bookmark) predicate.Bookmark {
	return predicate.Bookmark(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bookmark) predicate.Bookmark {
	return predicate.Bookmark(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bookmark) predicate.Bookmark {
	return predicate.Bookmark(sql.NotPredicates(p))
}
